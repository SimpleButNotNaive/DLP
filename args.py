p = 5682549022748424631339131913370125786212509227588493537874673173634936008725904358935442101466555561124455782847468955028529037660533553941399408331331403379
g = 2410497055970432881345493397846112198995088771364307195189734031205605186951241875096796459061741781667380437076874705300974836586165283741668656930807264789
# g = 1610199694236867902103084586156260484306820050663503013866639623097930249543168806526814507254407948055750960964971310568352400992321611017840341431973890026
ya = 973768284341326272301553751114322685324340805902069613339667142187801529585352406975030927008752571917079716318221077758236884342662829402529734009607531649
yb = 4149822765985031146554298777122732051870868431387323913747785791685310508836836283702926446817000114868007555717546362425841865173929670156568682745060708314
ord_g = 4309874666

def calc_factors(num):
    factors = {}

    while num != 1:
        one_factor = calc_one_factor(num)
        factors[one_factor] = factors.get(one_factor, 0) + 1
        num = num // one_factor
    return factors

def calc_one_factor(num):
    sq_root = int(num**(1/2) + 1)
    for i in range(2, sq_root):
        if (num % i) == 0:
            print("一个因数为：", i)
            return i
    return num

def modular_exponent(a, b, n):
    mask = 1
    result = 1
    while mask <= b:
        if mask & b:
            result = (result * a) % n
        a = (a * a) % n
        mask = mask << 1
    return result

if __name__ == "__main__":
    print((p - 1) % ord_g)
    # print(calc_factors(p - 1))
